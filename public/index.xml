<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>九頭竜</title>
    <link>https://msmsfjsw.netlify.app/</link>
    <description>Recent content on 九頭竜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://msmsfjsw.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rでの統計的学習</title>
      <link>https://msmsfjsw.netlify.app/2020/12/r%E3%81%A7%E3%81%AE%E7%B5%B1%E8%A8%88%E7%9A%84%E5%AD%A6%E7%BF%92/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/r%E3%81%A7%E3%81%AE%E7%B5%B1%E8%A8%88%E7%9A%84%E5%AD%A6%E7%BF%92/</guid>
      <description>最近流行りの統計的学習をRで実装。 まずは線形回帰から。
データセットの取得 MASSライブラリからBostonデータを取得。
library(MASS) dt &amp;lt;- head(Boston) knitr::kable(dt)   crim zn indus chas nox rm age dis rad tax ptratio black lstat medv    0.00632 18 2.31 0 0.538 6.575 65.2 4.0900 1 296 15.3 396.90 4.98 24.0  0.02731 0 7.07 0 0.469 6.421 78.9 4.9671 2 242 17.8 396.90 9.14 21.6  0.02729 0 7.07 0 0.469 7.185 61.1 4.9671 2 242 17.</description>
    </item>
    
    <item>
      <title>ブログ始めました</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>Rstudioでブログを作ってみました。このブログではSASやRでの統計解析の結果やコードをアップしていく予定。
解析は基本的にSASを使っているのだけど、RMarkdownが便利すぎて驚いた。Rでレポート作成ができ、プログラムを貼り付ければ解析結果を表示してくれるという素晴らしい仕様。解析結果をエクセルで作り直してワードに貼り付けるという今までの作業が馬鹿馬鹿しくなってくる。しかも論文作成と解析をRstudio内でつくるのだから結果の入力ミスなども防止できる。この記事もRMarkdownで書いてます。
RMarkdownはhtmlやpdfなどの形式でレポート作成ができるのでおすすめ。html表示ができる利点を活かして、試しに乱数データのデータフレームを表示してみる。
通常のRによる出力 y &amp;lt;- rnorm(10, rep(1:10), sd=1) mean &amp;lt;- rep(1:10) df &amp;lt;- data.frame(母平均=mean, 乱数=y) head(df) ## 母平均 乱数 ## 1 1 1.781545 ## 2 2 2.459910 ## 3 3 3.140292 ## 4 4 3.945440 ## 5 5 5.158530 ## 6 6 7.136379  HTML記法による出力 knitr::kable(df)   母平均 乱数    1 1.781545  2 2.459910  3 3.140292  4 3.945441  5 5.158530  6 7.</description>
    </item>
    
  </channel>
</rss>
