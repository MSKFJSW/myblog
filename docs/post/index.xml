<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 九頭竜</title>
    <link>https://msmsfjsw.netlify.app/post/</link>
    <description>Recent content in Posts on 九頭竜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://msmsfjsw.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>データの読み込み</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/</guid>
      <description>  Rstudioによるデータ読み込みについての簡単なまとめ。
CSVデータの読み込み dt &amp;lt;- read.csv(file=&amp;quot;heart.csv&amp;quot;, header=TRUE, fill=TRUE) dt &amp;lt;- read.table(file=&amp;quot;heart.csv&amp;quot;, header=TRUE, fill=TRUE)  file=“ファイル名”
上記はカレントの場合で、異なる場合はパスを指定 header={TRUE/FALSE}　1行目を変数名として読み込む
 fill={TRUE/FALSE}
欠測値の読み込み   EXCELデータの読みこみ library(gdata) dt &amp;lt;- read.xls(&amp;quot;heart.xlsx&amp;quot;, sheet=1) エクセルファイルの読み込みにはgdataパッケージのインストールが必要。 - sheet=シート番号 読み込むシートの番号を指定。名前は指定不可。
 SASファイルの読み込み library(haven) dt &amp;lt;- read_sas(&amp;quot;heart.sas7bdat&amp;quot;) SASから読み込んだ場合、欠測なども自動的にNAに変換してくれる。
 EXCELデータなどの範囲読み込み dt &amp;lt;- read.table(stdin(), header=TRUE, fill=TRUE) コンソールで0:と表示されるので、そこにエクセルなどからコピペすると入力完了。
 データ型について 上記の方法で読み込んだデータはデータフレームになる。データフレームでは列ごとに異なるデータ型を扱うことができ、excelファイルと似た扱いができる。個々のデータ参照も容易にできることから、データ解析を行う上で大変便利。（行列では1つの型しか扱えない） ただしデータフレームにおける文字データの型は「factor型」であることに注意。
 動作環境 Windows10 WSL2 Ubuntu20.04 Rstudio-server
 </description>
    </item>
    
    <item>
      <title>ブログ始めました</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>Rstudioでブログを作ってみました。このブログではSASやRでの統計解析の結果やコードをアップしていく予定。
解析は基本的にSASを使っているのだけど、RMarkdownが便利すぎて驚いた。Rでレポート作成ができ、プログラムを貼り付ければ解析結果を表示してくれるという素晴らしい仕様。解析結果をエクセルで作り直してワードに貼り付けるという今までの作業が馬鹿馬鹿しくなってくる。しかも論文作成と解析をRstudio内でつくるのだから結果の入力ミスなども防止できる。この記事もRMarkdownで書いてます。
RMarkdownはhtmlやpdfなどの形式でレポート作成ができるのでおすすめ。html表示ができる利点を活かして、試しに乱数データのデータフレームを表示してみる。
通常のRによる出力 y &amp;lt;- rnorm(10, rep(1:10), sd=1) mean &amp;lt;- rep(1:10) df &amp;lt;- data.frame(母平均=mean, 乱数=y) head(df) ## 母平均 乱数 ## 1 1 1.781545 ## 2 2 2.459910 ## 3 3 3.140292 ## 4 4 3.945440 ## 5 5 5.158530 ## 6 6 7.136379  HTML記法による出力 knitr::kable(df)   母平均 乱数    1 1.781545  2 2.459910  3 3.140292  4 3.945441  5 5.158530  6 7.</description>
    </item>
    
  </channel>
</rss>
