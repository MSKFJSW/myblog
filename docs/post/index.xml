<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 九頭竜</title>
    <link>https://msmsfjsw.netlify.app/post/</link>
    <description>Recent content in Posts on 九頭竜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 20 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://msmsfjsw.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>統計的因果推論とは何か</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E7%B5%B1%E8%A8%88%E7%9A%84%E5%9B%A0%E6%9E%9C%E6%8E%A8%E8%AB%96%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E7%B5%B1%E8%A8%88%E7%9A%84%E5%9B%A0%E6%9E%9C%E6%8E%A8%E8%AB%96%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B/</guid>
      <description>     GOTOトラベルとコロナ感染拡大の因果関係が一時期話題となったので、便乗して因果推論について簡単にまとめてみた。
因果推論とは何か 研究者や実務家が因果関係を示すために必要な手法は実験である。ではなぜ実験であれば因果関係が分かるのか。 通常私達が実験と聞いてイメージするのは、同じものを2つ用意し、それぞれ異なる条件や要因を適用することである。例えば、「ステンレスのトレーは魚の生臭さを消す」かを検証したい場合、消費期限・部位・味付け・種などが同じ魚を2匹用意し、片方はまな板、もう片方はステンレスのトレーに乗せる。そして魚の匂いを比較して匂いが消えていれば、それは「ステンレスのトレーが魚の匂いを消す」ことが証明される。（確かに匂いは消えるので試してガッテン！）
library(DiagrammeR) DiagrammeR::grViz(&amp;quot;digraph{ graph[fontoname=Meiryo] node[label=&amp;#39;ステンレスのトレー&amp;#39;] A }&amp;quot; )  {&#34;x&#34;:{&#34;diagram&#34;:&#34;digraph{\n graph[fontoname=Meiryo]\n node[label=\&#34;ステンレスのトレー\&#34;] A\n}&#34;,&#34;config&#34;:{&#34;engine&#34;:&#34;dot&#34;,&#34;options&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]} しかし人や動物を対象とした場合、途端に因果関係の検証は難しくなる。生物独特の複雑系が因果関係の検証を妨げるのである。「魚を食べている人は長生きする」は間違いではないかもしれないが、健康意識の高い人が長生きするの間違いとも考えられる。
 因果関係の推測を妨げる要因 因果関係の検証が難しいからと言って、私達は因果関係の検証を諦めるわけにはいかない。多くの社会問題や医療行為は実験不可能かもしれないが、それでも私達は因果関係の可能性を示し、対処しなければならない。
そこで重要なのは、一体どのような要因が因果関係の推測を妨げるのかを想定しておくことである。
1. 対象者の多様性 研究対象の多様性は因果関係の推測において大きな問題となる。ステンレスと魚の匂いの実験では同じ実験対象が用意できたからこそ、因果関係の検証が可能であった。しかし人の場合、遺伝子や養育環境も多様であり、同じ人間を用意することは不可能である。したがって個人単位や個人間を比較する研究では因果関係の検証は不可能である。（医学の例：症例報告、症例間の比較など）
 2. 追跡の難しさ（時間的前後関係） 因果関係とは、要因が時間的に先行して、結果をもたらすものである。ステンレスと魚の匂い実験では、暗黙のうちに時間的に前後の関係が想定されていた。しかし人の場合、同じ研究対象者のデータを時系列的に得ることは難しい。もちろん大学や研究機関であれば容易かもしれないが、個人の研究ではなかなか解決するのは大変だ。
 3. 測定者による恣意的な評価 医学分野では血圧や疾病への罹患などの臨床評価は医師によって行われる。しかし医師が対象者の投与された医薬品を知っていた場合、偏った診断をする可能性がある。つまり製薬会社への忖度などによって新薬の効果を過大評価する可能性がある。このように人が原因と結果を測定し評価する場合、研究結果が歪められる可能性がある。実際臨床試験では医師には研究対象者の投与された薬は知らされないことが絶対とされる。
 4. 生物学的・社会的メカニズムの複雑さ この問題は因果関係の推測を妨げる要因の一つではあるが、同時に問題とはならないケースもある。確かに生物学的メカニズムがわかれば因果関係ははっきりする。 しかし生物学的メカニズムが分からなくても、因果関係を検証することは可能である。これについては後ほど。
  因果関係の推測の阻害要因への対処 因果関係の推測を妨げる要因をざっくりと説明した。これらに対処することで、因果関係の検証に必要な方法が明確になる。
対処：等質な集団の構成（ランダム化） 同じ人を集めることは不可能だが、同じ集団を作ることは可能である。つまり年齢や性別、血圧などの生物学的指標・社会的属性の分布が似た集団を2つ以上用意することができれば、因果関係の検証は可能となる。これを実現する方法は医学分野では「ランダム化」と呼ばれ、対象者の多様性に対処する最も有効な方法である。研究対象者をいくつかのグループにランダムに分け、等質な集団を2つ以上作る。そしてそれぞれの集団に異なる要因を割り当てることで、あたかも実験と似たような状況を作り出す事ができる。「2つの同じ集団にそれぞれに要因が割り当てられ、結果が異なる場合、それは要因によるものとしか考えられない」というわけである。
ただしランダム化も万能ではない。 第1に、研究開始から研究終了時まで、グループごとの対象者属性の分布が同じとなるかはまた別の問題である。ランダム化で研究開始時点では同じ集団を作ったにも関わらず、期間を経るごとに異なる集団になっていく可能性がある。
第2に、対象者数が少なければ、ランダム化しても同じ集団とならない可能性が高くなる。これはいわゆるサンプルサイズの問題であり、統計学の議論が必要になるので割愛。
第3に、ランダム化する研究に参加する対象者は偏った集団になりやすい点である。臨床試験では主に健康な人が対象となるが、その研究で得られた結果は他の人にも当てはまるかは疑問である。例えばコロナウイルスのワクチンの臨床試験では、比較的健康な人を対象としており、ハイリスク集団である持病持ちの人や高齢者にも使用して良いかどうかはわからない。したがってコロナウイルスのワクチンに関しては、臨床試験が良い成績だったとしても、ハイリスク集団を含めた多くの人に使ってもらわない限り、全ての人に適用できるかはわからない。
最後に、ランダム化最大の問題は、有害性についての研究では倫理的な理由から実施することが不可能な点である。フッ素化合物などの有害性がある程度想定される要因を対象者に割り当てることは研究倫理に大きく反する。したがって有害性を研究する場合、ランダム化以外の方法で実験的状況を作り出すことが必要になるわけである。
  これを意識すれば、たちの悪いエセ医学に惑わされない、医学・健康リテラシーを身につけられる。
  </description>
    </item>
    
    <item>
      <title>データの読み込み</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/</guid>
      <description>  Rstudioによるデータ読み込みについての簡単なまとめ。
CSVデータの読み込み dt &amp;lt;- read.csv(file=&amp;quot;heart.csv&amp;quot;, header=TRUE, fill=TRUE) dt &amp;lt;- read.table(file=&amp;quot;heart.csv&amp;quot;, header=TRUE, fill=TRUE)  file=“ファイル名”
上記はカレントの場合で、異なる場合はパスを指定 header={TRUE/FALSE}　1行目を変数名として読み込む
 fill={TRUE/FALSE}
欠測値の読み込み   EXCELデータの読みこみ library(gdata) dt &amp;lt;- read.xls(&amp;quot;heart.xlsx&amp;quot;, sheet=1) エクセルファイルの読み込みにはgdataパッケージのインストールが必要。 - sheet=シート番号 読み込むシートの番号を指定。名前は指定不可。
 SASファイルの読み込み library(haven) dt &amp;lt;- read_sas(&amp;quot;heart.sas7bdat&amp;quot;) SASから読み込んだ場合、欠測なども自動的にNAに変換してくれる。
 EXCELデータなどの範囲読み込み dt &amp;lt;- read.table(stdin(), header=TRUE, fill=TRUE) コンソールで0:と表示されるので、そこにエクセルなどからコピペすると入力完了。
 データ型について 上記の方法で読み込んだデータはデータフレームになる。データフレームでは列ごとに異なるデータ型を扱うことができ、excelファイルと似た扱いができる。個々のデータ参照も容易にできることから、データ解析を行う上で大変便利。（行列では1つの型しか扱えない） ただしデータフレームにおける文字データの型は「factor型」であることに注意。
 動作環境 Windows10 WSL2 Ubuntu20.04 Rstudio-server
 </description>
    </item>
    
    <item>
      <title>ブログ始めました</title>
      <link>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msmsfjsw.netlify.app/2020/12/%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>Rstudioでブログを作ってみました。このブログではSASやRでの統計解析の結果やコードをアップしていく予定。
解析は基本的にSASを使っているのだけど、RMarkdownが便利すぎて驚いた。Rでレポート作成ができ、プログラムを貼り付ければ解析結果を表示してくれるという素晴らしい仕様。解析結果をエクセルで作り直してワードに貼り付けるという今までの作業が馬鹿馬鹿しくなってくる。しかも論文作成と解析をRstudio内でつくるのだから結果の入力ミスなども防止できる。この記事もRMarkdownで書いてます。
RMarkdownはhtmlやpdfなどの形式でレポート作成ができるのでおすすめ。html表示ができる利点を活かして、試しに乱数データのデータフレームを表示してみる。
通常のRによる出力 y &amp;lt;- rnorm(10, rep(1:10), sd=1) mean &amp;lt;- rep(1:10) df &amp;lt;- data.frame(母平均=mean, 乱数=y) head(df) ## 母平均 乱数 ## 1 1 1.781545 ## 2 2 2.459910 ## 3 3 3.140292 ## 4 4 3.945440 ## 5 5 5.158530 ## 6 6 7.136379  HTML記法による出力 knitr::kable(df)   母平均 乱数    1 1.781545  2 2.459910  3 3.140292  4 3.945441  5 5.158530  6 7.</description>
    </item>
    
  </channel>
</rss>
